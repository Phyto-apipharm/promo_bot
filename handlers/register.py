from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sheets import append_data_to_sheet
from handlers.repeat_order import phone_keyboard, new_order_button

router = Router()

class Registration(StatesGroup):
    waiting_for_id = State()
    waiting_for_order = State()

@router.message(F.contact)
async def process_contact(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω.\n\nü™™–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID-–Ω–æ–º–µ—Ä ü™™:")
    await state.set_state(Registration.waiting_for_id)

@router.message(Registration.waiting_for_id)
async def process_id_number(message: Message, state: FSMContext):
    await state.update_data(user_id=message.text)
    await message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ üì¶:")
    await state.set_state(Registration.waiting_for_order)

@router.message(F.text == "üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def repeat_order(message: Message, state: FSMContext):
    user_data = await state.get_data()
    if "phone" in user_data and "user_id" in user_data:
        await message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ üì¶:")
        await state.set_state(Registration.waiting_for_order)
    else:
        await message.answer("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        await state.clear()

@router.message(Registration.waiting_for_order)
async def order_received(message: Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        phone, user_iduser = user_data["phone"], user_data["user_id"]
        username, tg_id = message.from_user.username or "", str(message.from_user.id)

        await append_data_to_sheet(phone, username, tg_id, user_iduser, message.text)

        await message.answer(
            "‚úÖ –ó–∞–∫–∞–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n–£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n\n–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            reply_markup=new_order_button
        )

        await state.set_data({"phone": phone, "tg_id": tg_id, "user_id": user_iduser})

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
