import asyncio
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from config import ADMIN_IDS
from handlers.repeat_order import admin_keyboard, approve_keyboard
from sheets import get_sheet

router = Router()

class BroadcastState(StatesGroup):
    waiting_for_text = State()

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# üëâ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –∑–∞—è–≤–æ–∫ (Message –∏–ª–∏ CallbackQuery)
async def start_approving(event, state: FSMContext):
    user_id = event.from_user.id

    if user_id not in ADMIN_IDS:
        if isinstance(event, CallbackQuery):
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        else:
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    sheet = get_sheet()
    data = sheet.get_all_values()

    for idx, row in enumerate(data[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if len(row) < 6 or row[6]:  # –°—Ç–∞—Ç—É—Å —É–∂–µ –µ—Å—Ç—å
            continue

        text = (
            f"<b>üì¶ –ó–∞—è–≤–∫–∞</b>\n\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {row[0]}\n"
            f"üÜî ID: {row[3]}\n"
            f"üì¶ –ó–∞–∫–∞–∑: {row[4]}\n"
            f"üìÖ –î–∞—Ç–∞: {row[5]}"
        )

        await state.set_data({"row_index": idx, "tg_id": row[2]})  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ tg_id

        if isinstance(event, CallbackQuery):
            await event.message.answer(
                text,
                reply_markup=approve_keyboard,
                parse_mode="HTML"
            )
        else:
            await event.answer(
                text,
                reply_markup=approve_keyboard,
                parse_mode="HTML"
            )
        return

    # –ï—Å–ª–∏ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç
    if isinstance(event, CallbackQuery):
        await event.message.answer("‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")
    else:
        await event.answer("‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")

# üëâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìã –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤"
@router.message(F.text == "üìã –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤")
async def admin_start_approval(message: Message, state: FSMContext):
    await start_approving(message, state)

# üëâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ‚úÖ / ‚ùå
@router.callback_query(F.data.in_(["approve_order", "deny_order"]))
async def handle_approval(callback: CallbackQuery, state: FSMContext):
    admin_id = callback.from_user.id

    if admin_id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    data = await state.get_data()
    row_index = data.get("row_index")
    tg_id = data.get("tg_id")

    if not row_index:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.")
        return

    sheet = get_sheet()

    if callback.data == "approve_order":
        sheet.update_cell(row_index, 7, "–û–¥–æ–±—Ä–µ–Ω–æ")
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
    elif callback.data == "deny_order":
        sheet.delete_rows(row_index)
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

        # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if tg_id and str(tg_id).isdigit():
                await callback.bot.send_message(
                    int(tg_id),
                    "‚ö†Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @Phyto_apipharm_uz",
                )
        except Exception:
            pass  # –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é
    await start_approving(callback, state)

# üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
@router.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def ask_broadcast_text(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    await state.set_state(BroadcastState.waiting_for_text)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º Telegram ID
@router.message(BroadcastState.waiting_for_text)
async def send_broadcast(message: Message, state: FSMContext):
    sheet = get_sheet()
    data = sheet.get_all_values()[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏

    tg_ids = set()
    sent = 0
    failed = 0

    for row in data:
        if len(row) >= 3:
            tg_id = row[2]
            if tg_id.isdigit():
                tg_ids.add(int(tg_id))

    for tg_id in tg_ids:
        try:
            await message.bot.send_message(tg_id, message.text)
            sent += 1
            await asyncio.sleep(0.2)
        except Exception:
            failed += 1

    await message.answer(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent}\n‚ùå –û—à–∏–±–æ–∫: {failed}")
    await state.clear()
