from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import ADMIN_IDS, BOT_TOKEN
from sheets import get_sheet

router = Router()
bot = Bot(token=BOT_TOKEN)


class ApproveState(StatesGroup):
    approving = State()


def get_next_unapproved_row(sheet):
    all_rows = sheet.get_all_values()
    for index, row in enumerate(all_rows[1:], start=2):
        if len(row) < 6 or not row[5].strip():
            return index, row
    return None, None


def get_approval_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data="approve_order"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="deny_order")
        ]
    ])


@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await start_approving(message, state)


async def start_approving(message_or_callback, state: FSMContext):
    sheet = get_sheet()
    index, row = get_next_unapproved_row(sheet)

    if not row:
        await message_or_callback.answer("‚úÖ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    user_info = (
        f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {row[0]}\n"
        f"<b>üë§ Username:</b> @{row[1]}\n"
        f"<b>üÜî Telegram ID:</b> {row[2]}\n"
        f"<b>ü™™ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞:</b> {row[3]}\n"
        f"<b>üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {row[4]}\n"
        f"<b>üïì –í—Ä–µ–º—è:</b> {row[5]}"
    )

    await state.update_data(row_index=index)

    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(user_info, reply_markup=get_approval_keyboard(), parse_mode="HTML")
    else:
        await message_or_callback.message.edit_text(user_info, reply_markup=get_approval_keyboard(), parse_mode="HTML")


@router.callback_query(F.data.in_(["approve_order", "deny_order"]))
async def handle_approval(callback: CallbackQuery, state: FSMContext):
    admin_id = callback.from_user.id

    if admin_id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    data = await state.get_data()
    row_index = data.get("row_index")

    if not row_index:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.")
        return

    sheet = get_sheet()
    row = sheet.row_values(row_index)

    if callback.data == "approve_order":
        sheet.update_cell(row_index, 6, "–û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ")
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")

    elif callback.data == "deny_order":
        sheet.update_cell(row_index, 6, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå")
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

        # ‚õî –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        if len(row) >= 3 and row[2].isdigit():
            try:
                await bot.send_message(
                    chat_id=int(row[2]),
                    text=(
                        "‚ö†Ô∏è –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞.\n"
                        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É."
                    )
                )
            except Exception as e:
                print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É
    await start_approving(callback, state)
